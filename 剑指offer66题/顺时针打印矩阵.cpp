class Solution {
public:
    vector<int> printMatrix(vector<vector<int> > matrix) {
    int start = 0;
    int rend = matrix.size();
    int lend = matrix[0].size();
    vector<int> res;
    while(start<rend && start<lend)
    {
        int i = start;
        int j = start;
        for(; j < lend; j++)
        {
            res.push_back(matrix[start][j]);
        }
        // 此时 j = lend;所以j--;
        j--;
        i++;
        for(; i < rend; i++)
        {
            res.push_back(matrix[i][j]);//最后一列元素依次push进向量
        }
        // 此时 i = rend;所以i--；
        i--;
        j--;
        if(i==start)
            break;
        for(;j>=start;j--)
        {
            res.push_back(matrix[i][j]);
        }
        j++;
        i--;
        if(j==lend-1)
            break;
        for(;i>start;i--)
        {
            res.push_back(matrix[i][j]);
        }
        start++;
        lend--;
        rend--;


    }
        return res;
    }
};


/*解题思路：顺时针打印就是按圈数循环打印，一圈包含两行或者两列，
在打印的时候会出现某一圈中只包含一行，
要判断从左向右打印和从右向左打印的时候是否会出现重复打印，
同样只包含一列时，要判断从上向下打印和从下向上打印的时候是否会出现重复打印的情况*/
class Solution
{
public:
    vector<int> printMatrix(vector<vector<int> > matrix)
    {
        vector<int>res;
        res.clear();
        int row=matrix.size();//行数
        int collor=matrix[0].size();//列数
        //计算打印的圈数
        int circle=((row<collor?row:collor)-1)/2+1;
        //圈数
        for(int i=0; i<circle; i++)
        {
            //从左向右打印
            for(int j=i; j<collor-i; j++)
                res.push_back(matrix[i][j]);
            //从上往下的每一列数据
            for(int k=i+1; k<row-i; k++)
                res.push_back(matrix[k][collor-1-i]);
            //判断是否会重复打印(从右向左的每行数据)
            for(int m=collor-i-2; (m>=i)&&(row-i-1!=i); m--)
                res.push_back(matrix[row-i-1][m]);
            //判断是否会重复打印(从下往上的每一列数据)
            for(int n=row-i-2; (n>i)&&(collor-i-1!=i); n--)
                res.push_back(matrix[n][i]);
        }
        return res;
    }
};
